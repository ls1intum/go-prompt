// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.25.0
// source: developer_application.sql

package db

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const listDeveloperApplication = `-- name: ListDeveloperApplication :many
WITH student_a AS (
    SELECT 
    s.id,
    convert_from(lo_get(s.reason_for_blocked_by_pm), 'UTF-8') as reason_for_blocked_by_pm
FROM student s)
SELECT
    d.id,
    current_semester,
    convert_from(lo_get(experience), 'UTF-8') as experience,
    convert_from(lo_get(motivation), 'UTF-8') as motivation,
    course_iteration_id,
    project_team_id,
    post_kickoff_submission_id,
    study_program,
    study_degree,
    devices,
    courses_taken,
    english_language_proficiency,
    german_language_proficiency,
    s.id, s.reason_for_blocked_by_pm,
    a.id, a.assessed, a.assessment_score, a.technical_challenge_programming_score, a.technical_challenge_quiz_score, a.status
FROM developer_application d
LEFT JOIN student_a s ON s.id = d.student_id
LEFT JOIN application_assessment a on a.id = d.application_assessment_id
`

type ListDeveloperApplicationRow struct {
	ID                         pgtype.UUID           `json:"id"`
	CurrentSemester            pgtype.Int2           `json:"current_semester"`
	Experience                 string                `json:"experience"`
	Motivation                 string                `json:"motivation"`
	CourseIterationID          pgtype.UUID           `json:"course_iteration_id"`
	ProjectTeamID              pgtype.UUID           `json:"project_team_id"`
	PostKickoffSubmissionID    pgtype.UUID           `json:"post_kickoff_submission_id"`
	StudyProgram               pgtype.Text           `json:"study_program"`
	StudyDegree                pgtype.Text           `json:"study_degree"`
	Devices                    []Device              `json:"devices"`
	CoursesTaken               []Course              `json:"courses_taken"`
	EnglishLanguageProficiency pgtype.Text           `json:"english_language_proficiency"`
	GermanLanguageProficiency  pgtype.Text           `json:"german_language_proficiency"`
	Student                    Student               `json:"student"`
	ApplicationAssessment      ApplicationAssessment `json:"application_assessment"`
}

func (q *Queries) ListDeveloperApplication(ctx context.Context) ([]ListDeveloperApplicationRow, error) {
	rows, err := q.db.Query(ctx, listDeveloperApplication)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []ListDeveloperApplicationRow
	for rows.Next() {
		var i ListDeveloperApplicationRow
		if err := rows.Scan(
			&i.ID,
			&i.CurrentSemester,
			&i.Experience,
			&i.Motivation,
			&i.CourseIterationID,
			&i.ProjectTeamID,
			&i.PostKickoffSubmissionID,
			&i.StudyProgram,
			&i.StudyDegree,
			&i.Devices,
			&i.CoursesTaken,
			&i.EnglishLanguageProficiency,
			&i.GermanLanguageProficiency,
			&i.Student.ID,
			&i.Student.Email,
			&i.Student.FirstName,
			&i.Student.IsExchangeStudent,
			&i.Student.LastName,
			&i.Student.MatriculationNumber,
			&i.Student.Nationality,
			&i.Student.PublicID,
			&i.Student.TumID,
			&i.Student.BlockedByPm,
			&i.Student.ReasonForBlockedByPm,
			&i.Student.SuggestedAsCoach,
			&i.Student.SuggestedAsTutor,
			&i.Student.Gender,
			&i.ApplicationAssessment.ID,
			&i.ApplicationAssessment.Assessed,
			&i.ApplicationAssessment.AssessmentScore,
			&i.ApplicationAssessment.TechnicalChallengeProgrammingScore,
			&i.ApplicationAssessment.TechnicalChallengeQuizScore,
			&i.ApplicationAssessment.Status,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
