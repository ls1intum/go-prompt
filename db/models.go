// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.25.0

package db

import (
	"database/sql/driver"
	"fmt"

	"github.com/jackc/pgx/v5/pgtype"
)

type Course string

const (
	CourseITSE       Course = "ITSE"
	CoursePSE        Course = "PSE"
	CourseITP        Course = "ITP"
	CourseIPRAKTIKUM Course = "IPRAKTIKUM"
	CourseJASS       Course = "JASS"
	CourseFK         Course = "FK"
	CourseTHESIS     Course = "THESIS"
)

func (e *Course) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = Course(s)
	case string:
		*e = Course(s)
	default:
		return fmt.Errorf("unsupported scan type for Course: %T", src)
	}
	return nil
}

type NullCourse struct {
	Course Course `json:"course"`
	Valid  bool   `json:"valid"` // Valid is true if Course is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullCourse) Scan(value interface{}) error {
	if value == nil {
		ns.Course, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.Course.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullCourse) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.Course), nil
}

type Device string

const (
	DeviceMACBOOK     Device = "MACBOOK"
	DeviceIPHONE      Device = "IPHONE"
	DeviceIPAD        Device = "IPAD"
	DeviceAPPLEWATCH  Device = "APPLE_WATCH"
	DeviceRASPBERRYPI Device = "RASPBERRY_PI"
)

func (e *Device) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = Device(s)
	case string:
		*e = Device(s)
	default:
		return fmt.Errorf("unsupported scan type for Device: %T", src)
	}
	return nil
}

type NullDevice struct {
	Device Device `json:"device"`
	Valid  bool   `json:"valid"` // Valid is true if Device is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullDevice) Scan(value interface{}) error {
	if value == nil {
		ns.Device, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.Device.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullDevice) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.Device), nil
}

type ApplicationAssessment struct {
	ID                                 pgtype.UUID   `json:"id"`
	Assessed                           pgtype.Bool   `json:"assessed"`
	AssessmentScore                    pgtype.Int4   `json:"assessment_score"`
	TechnicalChallengeProgrammingScore pgtype.Float8 `json:"technical_challenge_programming_score"`
	TechnicalChallengeQuizScore        pgtype.Float8 `json:"technical_challenge_quiz_score"`
	Status                             string        `json:"status"`
}

type DeveloperApplication struct {
	ID                         pgtype.UUID `json:"id"`
	CurrentSemester            pgtype.Int2 `json:"current_semester"`
	Experience                 pgtype.Int4 `json:"experience"`
	Motivation                 pgtype.Int4 `json:"motivation"`
	ApplicationAssessmentID    pgtype.UUID `json:"application_assessment_id"`
	CourseIterationID          pgtype.UUID `json:"course_iteration_id"`
	ProjectTeamID              pgtype.UUID `json:"project_team_id"`
	PostKickoffSubmissionID    pgtype.UUID `json:"post_kickoff_submission_id"`
	StudyProgram               pgtype.Text `json:"study_program"`
	StudyDegree                pgtype.Text `json:"study_degree"`
	StudentID                  pgtype.UUID `json:"student_id"`
	Devices                    []Device    `json:"devices"`
	CoursesTaken               []Course    `json:"courses_taken"`
	EnglishLanguageProficiency pgtype.Text `json:"english_language_proficiency"`
	GermanLanguageProficiency  pgtype.Text `json:"german_language_proficiency"`
}

type Student struct {
	ID                   pgtype.UUID `json:"id"`
	Email                pgtype.Text `json:"email"`
	FirstName            pgtype.Text `json:"first_name"`
	IsExchangeStudent    pgtype.Bool `json:"is_exchange_student"`
	LastName             pgtype.Text `json:"last_name"`
	MatriculationNumber  pgtype.Text `json:"matriculation_number"`
	Nationality          pgtype.Text `json:"nationality"`
	PublicID             pgtype.UUID `json:"public_id"`
	TumID                pgtype.Text `json:"tum_id"`
	BlockedByPm          pgtype.Bool `json:"blocked_by_pm"`
	ReasonForBlockedByPm pgtype.Int4 `json:"reason_for_blocked_by_pm"`
	SuggestedAsCoach     pgtype.Bool `json:"suggested_as_coach"`
	SuggestedAsTutor     pgtype.Bool `json:"suggested_as_tutor"`
	Gender               pgtype.Text `json:"gender"`
}
